services:
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    hostname: kafka
    ports:
      - "${KAFKA_EXT_PORT:-9093}:${KAFKA_EXT_PORT:-9093}"
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: '${KAFKA_CLUSTER_ID}'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9094'
      KAFKA_LISTENERS: 'LISTENER_INTERNAL://kafka:9092,LISTENER_EXTERNAL://0.0.0.0:${KAFKA_EXT_PORT:-9093},CONTROLLER://kafka:9094'
      KAFKA_ADVERTISED_LISTENERS: 'LISTENER_INTERNAL://kafka:9092,LISTENER_EXTERNAL://localhost:${KAFKA_EXT_PORT:-9093}'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,LISTENER_INTERNAL:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'LISTENER_INTERNAL'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: '${KAFKA_AUTO_CREATE_TOPICS_ENABLE:-true}'
    networks:
      - crypto-pulse-net
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  data-fetcher:
    build:
      context: .
      dockerfile: ./data-fetcher/Dockerfile
    container_name: data-fetcher
    restart: on-failure
    networks:
      - crypto-pulse-net
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-crypto-updates}
      COINGECKO_API_KEY: ${COINGECKO_API_KEY}
      API_HOST: ${API_HOST:-https://api.coingecko.com}
      API_PATH: ${API_PATH:-/api/v3}
      TRACKED_COIN_IDS: ${TRACKED_COIN_IDS:-bitcoin,ethereum}
      DEFAULT_CURRENCY: ${DEFAULT_CURRENCY:-usd}
      FETCH_INTERVAL_MS: ${FETCH_INTERVAL_MS:-30000}
      LOG_DIR: ${LOG_DIR:-logs}
      LOG_DEFAULT_LEVEL: ${LOG_DEFAULT_LEVEL:-info}
      LOG_LEVEL_DATA_FETCHER: ${LOG_LEVEL_DATA_FETCHER}
    depends_on:
      kafka:
        condition: service_healthy

  websocket-service:
    build:
      context: .
      dockerfile: ./websocket-service/Dockerfile
    container_name: websocket-service
    restart: on-failure
    ports:
      - "${WEBSOCKET_PORT:-8080}:${WEBSOCKET_PORT:-8080}"
    networks:
      - crypto-pulse-net
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      WEBSOCKET_PORT: ${WEBSOCKET_PORT:-8080}
      KAFKA_BROKER: ${KAFKA_BROKER:-kafka:9092}
      KAFKA_TOPIC: ${KAFKA_TOPIC:-crypto-updates}
      LOG_DIR: ${LOG_DIR:-logs}
      LOG_DEFAULT_LEVEL: ${LOG_DEFAULT_LEVEL:-info}
      LOG_LEVEL_WEBSOCKET_SERVICE: ${LOG_LEVEL_WEBSOCKET_SERVICE}
    depends_on:
      kafka:
        condition: service_healthy

  api-service:
    build:
      context: .
      dockerfile: ./api-service/Dockerfile
    container_name: api-service
    restart: on-failure
    ports:
      - "${API_PORT:-5001}:5001"
    networks:
      - crypto-pulse-net
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      API_PORT: ${API_PORT:-5001}
      API_BASE_PATH: ${API_BASE_PATH:-/api/v1}
      TRACKED_COIN_IDS: ${TRACKED_COIN_IDS:-bitcoin,ethereum}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      LOG_DIR: ${LOG_DIR:-logs}
      LOG_DEFAULT_LEVEL: ${LOG_DEFAULT_LEVEL:-info}
      LOG_LEVEL_API_SERVICE: ${LOG_LEVEL_API_SERVICE}
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "${POSTGRES_EXPOSED_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-cryptopulse}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crypto-pulse-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-cryptopulse}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "${REDIS_EXPOSED_PORT:-6379}:6379"
    networks:
      - crypto-pulse-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    container_name: frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    networks: 
      - crypto-pulse-net
    depends_on:
      - api-service
      - websocket-service

networks:
  crypto-pulse-net:
    driver: bridge

volumes:
  postgres_data:
